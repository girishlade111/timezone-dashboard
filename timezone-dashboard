import { useState, useEffect } from 'react'
import { Clock } from 'lucide-react'
import { Button } from "/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "/components/ui/card"
import { Label } from "/components/ui/label"
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "/components/ui/select"

// List of all available time zones
const allTimeZones = [
  'America/New_York',
  'America/Los_Angeles',
  'Europe/London',
  'Europe/Paris',
  'Asia/Tokyo',
  'Asia/Shanghai',
  'Australia/Sydney',
  'America/Chicago',
  'America/Denver',
  'Asia/Dubai',
  'Asia/Kolkata',
  'Pacific/Auckland'
]

// Initial time zones to display
const initialTimeZones = [
  'America/New_York',
  'Europe/London',
  'Asia/Tokyo',
  'Australia/Sydney',
  'Asia/Dubai',
  'Asia/Shanghai'
]

interface TimeZoneData {
  timeZone: string
  time: string
  date: string
}

export default function TimeZoneDashboard() {
  const [timeZones, setTimeZones] = useState<string[]>(initialTimeZones)
  const [timeData, setTimeData] = useState<TimeZoneData[]>([])
  const [selectedTimeZone, setSelectedTimeZone] = useState<string>('')

  // Format time for a specific time zone
  const formatTime = (timeZone: string) => {
    const now = new Date()
    const timeOptions: Intl.DateTimeFormatOptions = {
      timeStyle: 'medium',
      timeZone
    }
    const dateOptions: Intl.DateTimeFormatOptions = {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      timeZone
    }
    
    return {
      timeZone,
      time: new Intl.DateTimeFormat('en-US', timeOptions).format(now),
      date: new Intl.DateTimeFormat('en-US', dateOptions).format(now)
    }
  }

  // Update all displayed times
  const updateTimes = () => {
    const updatedTimes = timeZones.map(tz => formatTime(tz))
    setTimeData(updatedTimes)
  }

  // Add a new time zone
  const addTimeZone = () => {
    if (selectedTimeZone && !timeZones.includes(selectedTimeZone)) {
      setTimeZones([...timeZones, selectedTimeZone])
      setSelectedTimeZone('')
    }
  }

  // Remove a time zone
  const removeTimeZone = (timeZone: string) => {
    setTimeZones(timeZones.filter(tz => tz !== timeZone))
  }

  // Update times every second
  useEffect(() => {
    updateTimes()
    const interval = setInterval(updateTimes, 1000)
    return () => clearInterval(interval)
  }, [timeZones])

  // Get the display name for a time zone
  const getDisplayName = (timeZone: string) => {
    const parts = timeZone.split('/')
    return parts[parts.length - 1].replace(/_/g, ' ')
  }

  return (
    <div className="min-h-screen bg-gray-50 p-4 md:p-8">
      <div className="max-w-6xl mx-auto">
        <Card className="mb-6">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Clock className="w-6 h-6" />
              <span>Time Zone Dashboard</span>
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="flex flex-col md:flex-row gap-4 items-start md:items-end">
              <div className="flex-1">
                <Label htmlFor="timezone-select" className="block mb-2">Add Time Zone</Label>
                <Select onValueChange={setSelectedTimeZone} value={selectedTimeZone}>
                  <SelectTrigger className="w-full">
                    <SelectValue placeholder="Select a time zone" />
                  </SelectTrigger>
                  <SelectContent>
                    {allTimeZones
                      .filter(tz => !timeZones.includes(tz))
                      .map(tz => (
                        <SelectItem key={tz} value={tz}>
                          {getDisplayName(tz)}
                        </SelectItem>
                      ))}
                  </SelectContent>
                </Select>
              </div>
              <Button 
                onClick={addTimeZone} 
                disabled={!selectedTimeZone}
                className="w-full md:w-auto"
              >
                Add Time Zone
              </Button>
            </div>
          </CardContent>
        </Card>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {timeData.map(({ timeZone, time, date }) => (
            <Card key={timeZone} className="relative">
              <Button 
                variant="ghost" 
                size="sm" 
                className="absolute top-2 right-2 text-muted-foreground hover:text-destructive"
                onClick={() => removeTimeZone(timeZone)}
              >
                Remove
              </Button>
              <CardHeader>
                <CardTitle>{getDisplayName(timeZone)}</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-3xl font-bold mb-2">{time}</div>
                <div className="text-muted-foreground">{date}</div>
                <div className="text-sm mt-2 text-muted-foreground">
                  {timeZone}
                </div>
              </CardContent>
            </Card>
          ))}
        </div>
      </div>
    </div>
  )
}
